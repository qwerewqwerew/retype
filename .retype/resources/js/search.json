[[{"l":"열심히해요","p":["이모지"]}],[{"l":"1. 반응형 웹 만들기"},{"l":"목차","p":["1. 01","1.1. 미디어쿼리의 사용 p40","1.2. 서로 다른 크기의 박스를 가변 크기로 변환하기 p48- 1.2.0.0.0.1. 02-1_시작- 1.2.0.0.0.2. 02-1_완료","1.3. 가변마진,가변패딩 p52","1.3.1. 가변마진- 1.3.1.0.0.1. ex_01","1.3.2. 가변패딩 56- 1.3.2.0.0.1. ex_02","1.3.3. 가변패딩 58- 1.3.3.0.0.1. 02-2","1.3.4. 첫째마당 01-첫째마당/2장/실습/02_3 을 열어 직접 가변 패딩을 적용해본다- 1.3.4.0.0.1. 02-3_시작- 1.3.4.0.0.2. 02-3_완료","1.4. 가변미디어 73p","1.4.1. 가변이미지- 1.4.1.0.0.1. ex_11","1.4.2. 가변비디오 75p- 1.4.2.0.0.1. ex_12- 1.4.2.0.0.2. ex_13(fitvids)","1.5. 미디어쿼리 80p","1.5.1. Media Query의 기본 문법","1.5.1.1. @media 규칙","1.5.2. 미디어 유형","1.5.3. 조건문","1.5.4. 적용하기1- 1.5.4.0.0.1. ex_01","1.5.5. 적용하기2- 1.5.5.0.0.1. 03-1_시작- 1.5.5.0.0.2. 03-1_완료","1.6. 뷰포트 91p"]},{"l":"1. 01"},{"i":"11-미디어쿼리의-사용-p40","l":"1.1. 미디어쿼리의 사용 p40"},{"i":"12-서로-다른-크기의-박스를-가변-크기로-변환하기-p48","l":"1.2. 서로 다른 크기의 박스를 가변 크기로 변환하기 p48"},{"i":"120001-02-1_시작","l":"1.2.0.0.0.1. 02-1_시작"},{"i":"120002-02-1_완료","l":"1.2.0.0.0.2. 02-1_완료"},{"i":"13-가변마진가변패딩-p52","l":"1.3. 가변마진,가변패딩 p52"},{"i":"131-가변마진","l":"1.3.1. 가변마진"},{"i":"131001-ex_01","l":"1.3.1.0.0.1. ex_01"},{"i":"132-가변패딩-56","l":"1.3.2. 가변패딩 56"},{"i":"132001-ex_02","l":"1.3.2.0.0.1. ex_02"},{"i":"133-가변패딩-58","l":"1.3.3. 가변패딩 58"},{"i":"133001-02-2","l":"1.3.3.0.0.1. 02-2"},{"i":"134-첫째마당-01-첫째마당2장실습02_3-을-열어-직접-가변-패딩을-적용해본다","l":"1.3.4. 첫째마당 01-첫째마당/2장/실습/02_3 을 열어 직접 가변 패딩을 적용해본다"},{"i":"134001-02-3_시작","l":"1.3.4.0.0.1. 02-3_시작"},{"i":"134002-02-3_완료","l":"1.3.4.0.0.2. 02-3_완료"},{"i":"14-가변미디어-73p","l":"1.4. 가변미디어 73p"},{"i":"141-가변이미지","l":"1.4.1. 가변이미지"},{"i":"141001-ex_11","l":"1.4.1.0.0.1. ex_11"},{"i":"142-가변비디오-75p","l":"1.4.2. 가변비디오 75p"},{"i":"142001-ex_12","l":"1.4.2.0.0.1. ex_12"},{"i":"142002-ex_13fitvids","l":"1.4.2.0.0.2. ex_13(fitvids)"},{"i":"15-미디어쿼리-80p","l":"1.5. 미디어쿼리 80p"},{"i":"151-media-query의-기본-문법","l":"1.5.1. Media Query의 기본 문법"},{"i":"1511-media-규칙","l":"1.5.1.1. @media 규칙"},{"i":"152-미디어-유형","l":"1.5.2. 미디어 유형","p":["미디어 유형","설명","all","모든 장치에 대해 스타일을 적용합니다.","screen","컴퓨터 화면, 태블릿, 스마트폰 등의 화면에 대해 스타일을 적용합니다.","print","프린터 출력 시에만 스타일을 적용합니다.","speech","음성 합성기가 있는 장치에서 읽힐 때만 스타일을 적용합니다."]},{"i":"153-조건문","l":"1.5.3. 조건문","p":["(hover: hover-state)","(max-resolution: value)","(max-width: value)","(min-resolution: value)","(min-width: value)","(orientation: value)","(pointer: coarse/fine/none/auto)","가로( landscape) 또는 세로( portrait) 방향으로 설정된 장치에 대해 스타일을 적용합니다.","마우스 호버 상태( hover)인지 아닌지를 기준으로 스타일을 적용합니다.","설명","조건문","최대 너비가 value 보다 작거나 같은 경우에 해당하는 장치에 대해 스타일을 적용합니다.","최대 해상도가 value dpi 이하인 경우에 해당하는 장치에 대해 스타일을 적용합니다.","최소 너비가 value 보다 크거나 같은 경우에 해당하는 장치에 대해 스타일을 적용합니다.","최소 해상도가 value dpi 이상인 경우에 해당하는 장치에 대해 스타일을 적용합니다.","포인터 유형이 coarse(손가락 등 큰 입력 장치), fine(마우스 등 작은 입력 장치), none(입력장치 없음) 또는 auto(자동) 중 하나와 일치할 때, 해당하는 장치에 대해 스타일을 적용합니다."]},{"i":"154-적용하기1","l":"1.5.4. 적용하기1"},{"i":"154001-ex_01","l":"1.5.4.0.0.1. ex_01","p":["min은 최소 또는 그 이상 이라는 뜻으로 점차 커지는 것을 의미 하기 때문에 반드시 작은 순서에서 큰 순서로 작성 해야 한다. 반대로 max는 최대 또는 그 이하 라는 뜻으로 점차 작아지는 것을 의미 하기 때문에 큰순서에서 작은 순서로 작성한다."]},{"i":"155-적용하기2","l":"1.5.5. 적용하기2","p":["브라우저의 크기가 320이상일때 박스의 가로를 100%","브라우저의 크기가 768이상일때 첫번째 박스부터 네번째 박스까지 너비를 50% col배치 줄바꿈 마지막 박스는 100%","브라우저의 크기가 1024이상일때 모든 박스 너빗값 20% row 배치"]},{"i":"155001-03-1_시작","l":"1.5.5.0.0.1. 03-1_시작"},{"i":"155002-03-1_완료","l":"1.5.5.0.0.2. 03-1_완료"},{"i":"16-뷰포트-91p","l":"1.6. 뷰포트 91p","p":["meta name=viewport content=width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no /","width=device-width: 뷰포트 너비를 디바이스의 화면 너비와 동일하게 설정합니다.","initial-scale=1: 초기 축척 비율(scale)을 1로 설정하여 기본 확대/축소 비율로 시작합니다.","minimum-scale=1: 최소 축척 비율(scale)을 1로 제한하여 사용자가 줌 아웃(축소)할 수 없도록 합니다.","maximum-scale=1: 최대 축척 비율(scale)을 1로 제한하여 사용자가 줌 인(확대)할 수 없도록 합니다.","user-scalable=no: 사용자가 화면을 줌 인/아웃 할 수 없도록 합니다."]}],[{"l":"2. 반응형 프로젝트"},{"l":"목차","p":["1. psd to fig","1.1. 1.1 제공된 psd를 fig로 변환한다","2. fig to psd","3. 웹사이트 구조작성 139p","3.1. 프로젝트폴더구성 139p","3.1.1. 폴더구조","3.2. 기본구조 작업","3.2.1. 메인페이지","3.2.1.1. index.html index","3.2.2. 서브페이지","3.2.2.1. introduce.html introduce.html","3.2.2.2. gallery.html gallery.html","3.2.2.3. board.html board.html","3.3. 기본스타일 작업 교재 143p","3.3.1. reset.css reset.css","3.4. 미디어쿼리 작성하기 145p","3.4.1.index.html","3.4.2. subpages","4. 메인페이지 제작","4.1. 메인페이지 구조 150p","4.2. 완성","4.2.1. 인포메이션","4.2.2. 헤더","4.2.3. 슬라이더","4.2.4. 최근글","4.2.5. 인기글","4.2.6. 갤러리","4.2.7. 인기검색어","4.2.8. 배너","4.2.9. sns","4.3. 메인페이지 반응형 css 작업 161p","4.4. 완성","4.4.1. 인포메이션","4.4.1.1. 모바일","4.4.1.2. PC","4.4.2. 헤더 164p","4.4.2.1. 모바일","4.4.2.2. 태블릿 169p","4.4.2.3. PC 172p","4.4.3. 슬라이더 173p","4.4.3.1. 모바일","4.4.3.2. 태블릿 169p","4.4.3.3. PC 172p","4.4.4. 최근 글 영역, 인기 글 영역 176p","4.4.4.1. 모바일","4.4.4.2. 태블릿 169p","4.4.4.3. PC 172p","4.4.5. 갤러리 180p","4.4.5.1. 모바일","4.4.5.2. 태블릿 169p","4.4.5.3. PC 172p","4.4.6. 인기검색어~푸터 184p","4.4.6.1. 모바일","4.4.6.2. 태블릿 169p","4.4.6.3. PC 172p"]},{"l":"1. psd to fig"},{"i":"11-11-제공된-psd를-fig로-변환한다","l":"1.1. 1.1 제공된 psd를 fig로 변환한다","p":["alt"]},{"l":"2. fig to psd"},{"l":"3. 웹사이트 구조작성 139p","p":["figma 시안 링크"]},{"i":"31-프로젝트폴더구성-139p","l":"3.1. 프로젝트폴더구성 139p"},{"i":"311-폴더구조","l":"3.1.1. 폴더구조","p":["프로젝트 폴더를 만들고 폴더의 구조를 생성한후 리소스 폴더를 복붙한다.","리소스 폴더 경로","/02-둘째마당/5장/완성/반응형 웹 기본구성 폴더/images,js,webfont"]},{"i":"32-기본구조-작업","l":"3.2. 기본구조 작업"},{"i":"321-메인페이지","l":"3.2.1. 메인페이지"},{"i":"3211-indexhtml-index","l":"3.2.1.1. index.html index"},{"i":"322-서브페이지","l":"3.2.2. 서브페이지"},{"i":"3221-introducehtml-introducehtml","l":"3.2.2.1. introduce.html introduce.html"},{"i":"3222-galleryhtml-galleryhtml","l":"3.2.2.2. gallery.html gallery.html"},{"i":"3223-boardhtml-boardhtml","l":"3.2.2.3. board.html board.html"},{"i":"33-기본스타일-작업-교재-143p","l":"3.3. 기본스타일 작업 교재 143p","p":["https://meyerweb.com/eric/tools/css/reset/","reset.css 를 받아서 적용후 커스터마이징 한다."]},{"i":"331-resetcss-resetcss","l":"3.3.1. reset.css reset.css"},{"i":"34-미디어쿼리-작성하기-145p","l":"3.4. 미디어쿼리 작성하기 145p"},{"i":"341indexhtml","l":"3.4.1.index.html"},{"i":"342-subpages","l":"3.4.2. subpages"},{"l":"4. 메인페이지 제작"},{"i":"41-메인페이지-구조-150p","l":"4.1. 메인페이지 구조 150p"},{"i":"42-완성","l":"4.2. 완성"},{"i":"421-인포메이션","l":"4.2.1. 인포메이션"},{"i":"422-헤더","l":"4.2.2. 헤더"},{"i":"423-슬라이더","l":"4.2.3. 슬라이더"},{"i":"424-최근글","l":"4.2.4. 최근글"},{"i":"425-인기글","l":"4.2.5. 인기글"},{"i":"426-갤러리","l":"4.2.6. 갤러리"},{"i":"427-인기검색어","l":"4.2.7. 인기검색어"},{"i":"428-배너","l":"4.2.8. 배너"},{"i":"429-sns","l":"4.2.9. sns"},{"i":"43-메인페이지-반응형-css-작업-161p","l":"4.3. 메인페이지 반응형 css 작업 161p"},{"i":"44-완성","l":"4.4. 완성","p":["break-point","device","제목3","제목4","360~ 767","Mobile","---","768~ 959","Tablet","960~","Desktop","교재는 인라인 방식으로 작성했으나 link로 변경하여 진행한다.","link rel=stylesheet href=./css/default.css"]},{"i":"441-인포메이션","l":"4.4.1. 인포메이션"},{"i":"4411-모바일","l":"4.4.1.1. 모바일"},{"i":"4412-pc","l":"4.4.1.2. PC"},{"i":"442-헤더-164p","l":"4.4.2. 헤더 164p"},{"i":"4421-모바일","l":"4.4.2.1. 모바일"},{"i":"4422-태블릿-169p","l":"4.4.2.2. 태블릿 169p","p":["alt"]},{"i":"4423-pc-172p","l":"4.4.2.3. PC 172p"},{"i":"443-슬라이더-173p","l":"4.4.3. 슬라이더 173p"},{"i":"4431-모바일","l":"4.4.3.1. 모바일"},{"i":"4432-태블릿-169p","l":"4.4.3.2. 태블릿 169p"},{"i":"4433-pc-172p","l":"4.4.3.3. PC 172p"},{"i":"444-최근-글-영역-인기-글-영역-176p","l":"4.4.4. 최근 글 영역, 인기 글 영역 176p"},{"i":"4441-모바일","l":"4.4.4.1. 모바일"},{"i":"4442-태블릿-169p","l":"4.4.4.2. 태블릿 169p"},{"i":"4443-pc-172p","l":"4.4.4.3. PC 172p"},{"i":"445-갤러리-180p","l":"4.4.5. 갤러리 180p"},{"i":"4451-모바일","l":"4.4.5.1. 모바일"},{"i":"4452-태블릿-169p","l":"4.4.5.2. 태블릿 169p"},{"i":"4453-pc-172p","l":"4.4.5.3. PC 172p"},{"i":"446-인기검색어푸터-184p","l":"4.4.6. 인기검색어~푸터 184p"},{"i":"4461-모바일","l":"4.4.6.1. 모바일"},{"i":"4462-태블릿-169p","l":"4.4.6.2. 태블릿 169p"},{"i":"4463-pc-172p","l":"4.4.6.3. PC 172p"}],[{"l":"3. 서브페이지제작"},{"l":"목차","p":["1. 구조작업","1.1. 기본구조","1.2. introudce- 1.2.0.1. introudce","1.3. gallery 204p- 1.3.0.1. gallery","1.4. board 207p- 1.4.0.1. board","2. 스타일작업","2.1. 기본스타일- 2.1.0.1. 모바일 p211- 2.1.0.2. 태블릿 p212- 2.1.0.3. PC p213","2.2. introduce 214p","2.2.1. 모바일","2.2.2. 태블릿","2.2.3. PC"]},{"l":"1. 구조작업"},{"i":"11-기본구조","l":"1.1. 기본구조","p":["아래의 이미지처럼 메인 페이지와 서브페이지는 표시된 부분만 달라지므로 동일한 부분은 복사하여 사용한다 설명이미지⭐ 다른 부분만 코딩"]},{"i":"12-introudce","l":"1.2. introudce"},{"i":"1201-introudce","l":"1.2.0.1. introudce","p":["template 를 다른이름으로 저장","introudce.html","content_section 영역내에 코드 작성"]},{"i":"13-gallery-204p","l":"1.3. gallery 204p"},{"i":"1301-gallery","l":"1.3.0.1. gallery","p":["template 를 다른이름으로 저장","introudce.html","content_section 영역내에 코드 작성"]},{"i":"14-board-207p","l":"1.4. board 207p"},{"i":"1401-board","l":"1.4.0.1. board"},{"l":"2. 스타일작업"},{"i":"21-기본스타일","l":"2.1. 기본스타일","p":["⚡ default.css 의 공통 부분을 잘라내어 common.css 로 저장한다. 그후 서브 페이지에서 링크한다 template.css"]},{"i":"2101-모바일-p211","l":"2.1.0.1. 모바일 p211"},{"i":"2102-태블릿-p212","l":"2.1.0.2. 태블릿 p212"},{"i":"2103-pc-p213","l":"2.1.0.3. PC p213"},{"i":"22-introduce-214p","l":"2.2. introduce 214p","p":["2.1.과정의 css를 다른이름으로 저장-> introduce.css"]},{"i":"221-모바일","l":"2.2.1. 모바일"},{"i":"222-태블릿","l":"2.2.2. 태블릿"},{"i":"223-pc","l":"2.2.3. PC"}],[{"l":"1. form 요소 디자인","p":["1.1. 큰 체크박스,라디오버튼","1.2. 디자인 체크박스","1.3. 토글스위치","1.4. select 디자인 초급","1.5. select 디자인 고급","1.6. 검색창 디자인"]},{"i":"11-큰-체크박스라디오버튼","l":"1.1. 큰 체크박스,라디오버튼","p":["완성이미지"]},{"i":"12-디자인-체크박스","l":"1.2. 디자인 체크박스"},{"i":"13-토글스위치","l":"1.3. 토글스위치","p":["완성이미지"]},{"i":"14-select-디자인-초급","l":"1.4. select 디자인 초급"},{"i":"15-select-디자인-고급","l":"1.5. select 디자인 고급"},{"i":"16-검색창-디자인","l":"1.6. 검색창 디자인"}],[{"i":"2마우스-오버-효과","l":"2.마우스 오버 효과","p":["1.1. button-hover","1.1.1. mouse-hover1","1.1.2. mouse-hover2","1.1.3. mouse-hover3","1.1.4. mouse-hover4","1.2. image-hover","1.2.1. image-hover1","1.2.2. image-hover2"]},{"i":"11-button-hover","l":"1.1. button-hover"},{"i":"111-mouse-hover1","l":"1.1.1. mouse-hover1","p":["미리보기"]},{"i":"112-mouse-hover2","l":"1.1.2. mouse-hover2","p":["미리보기"]},{"i":"113-mouse-hover3","l":"1.1.3. mouse-hover3","p":["미리보기"]},{"i":"114-mouse-hover4","l":"1.1.4. mouse-hover4","p":["미리보기"]},{"i":"12-image-hover","l":"1.2. image-hover"},{"i":"121-image-hover1","l":"1.2.1. image-hover1","p":["미리보기","\uD83D\uDD17 예제이미지다운로드"]},{"i":"122-image-hover2","l":"1.2.2. image-hover2","p":["미리보기","\uD83D\uDD17 예제이미지다운로드"]}],[{"l":"1. 자바스크립트의 시작"},{"l":"목차","p":["1. 자바스크립트의 역할","1.1. 웹의 요소 제어","1.2. 웹 애플리케이션 제작","1.3. 다양한 라이브러리의 사용","1.4. 서버개발","2. 브라우저에 삽입하기","2.1. 웹문서안에 script 태그로 넣기","2.1.1. 예제","2.1.2. 예제","3. 자바스크립트의 기본 용어- 3.0.1. 예제","4. 입출력하기","4.1. 알림창","4.1.1. 예제","4.2. 확인창","4.2.1. 예제","4.3. 프롬프트창","4.3.1. 예제","4.4. document.write","4.4.1. 예제","4.4.2. 예제","4.4.2.1. ∎ 식별자","4.4.2.2. ∎ 식별자 표기로 구분하는 표현식","4.5. console.log","4.5.1. 예제","4.6. 오류확인","4.6.1. 4.6.1 예제","4.7. 자바스크립트 코딩 컨벤션(convention)","4.7.1. 구글의 스타일가이드","4.7.2. 에어비앤비의 스타일가이드-공식","4.7.3. 에어비앤비의 스타일가이드-번역","4.7.4. 자바스크립트 소스를 작성할때 지켜야할 규칙","4.7.4.1. 들여쓰기","4.7.4.2. 세미콜론","4.7.4.3. 공백의 사용","4.7.4.4. 주석의 활용","4.7.4.5. 식별자의 규칙","4.7.4.5.1. 예시","4.7.4.5.2. 규칙","4.7.4.5.3. 관례","4.7.4.5.3.1. 예시","개요설명-1-role"]},{"l":"1. 자바스크립트의 역할","p":["자바스크립트는 웹의 초창기 시절부터 지금까지 웹브라우저에서 꾸준히 사용해온 언어이다. 또한 계속 발전하고 있다.","\uD83D\uDD17ECMA script 공식사이트","\uD83D\uDD17모던자바스크립트 튜토리얼","\uD83D\uDD17MDN JS tutorial"]},{"i":"11-웹의-요소-제어","l":"1.1. 웹의 요소 제어","p":["html은 내용을 구성한다","css 는 디자인을 지정한다.","js는 요소를 움직이거나 데이터를 동적으로 변경한다."]},{"i":"12-웹-애플리케이션-제작","l":"1.2. 웹 애플리케이션 제작","p":["과거의 웹이 단순한 정보 제공이 목적이었다면 근대의 웹은 사용자와의 상호작용을 하며 애플리케이션 처럼 동작하고 있다. 웹 브라우저 내에서 문서작성이나 그림을 그릴수 있으며 게임도 할수 있다. 낯선 곳을 찾아 갈때 검색하는 온라인 지도의 길 찾기 서비스도 애플리케이션 로그인 인증 서비스도 모두 자바스크립트로 구현한다."]},{"i":"13-다양한-라이브러리의-사용","l":"1.3. 다양한 라이브러리의 사용","p":["웹 플랫폼 중심의 서비스가 늘어나면서 산업이 발전함에 따라 과거에는 서버에서 했던 일들을 이제는 클라이언트 에서도 할수 있게 되었다.","리액트, 앵귤러, 뷰, 제이쿼리등 웹 애플리케이션 개발시 사용할수 있는 다양한 프레임워크/라이브러리 들이 있다."]},{"i":"14-서버개발","l":"1.4. 서버개발","p":["자바스크립트는 기본적으로 사용자 컴퓨터에서 동작하는 클라이언트 전용 프로그램 이었으나 구글에서 개발한 Nodejs의 출시로 서버프로그램의 제작이 가능하게 되었다. 예전 백앤드 개발시 PHP, java, 닷넷을 사용하였으나 요즘은 자바스크립트 만으로도 백엔드 개발이 가능하다. 이에 따라 자바스크립트는 더욱 개발 생태계에서 강력한 언어가 되었다. 프런트와 백엔드를 모두 개발할수 있는 사람을 풀스택 개발자라고 한다."]},{"l":"2. 브라우저에 삽입하기","p":["웹브라우저에는 자바스크립트 소스를 읽고 처리하는 해석기 (JavaScript Interpreter) 가 있다.","따라서 자바스크립트 소스는 웹문서에 script 태그를 이용해서 작성할수 있다."]},{"i":"21-웹문서안에-script-태그로-넣기","l":"2.1. 웹문서안에 script 태그로 넣기","p":["소스코드가 짧을 경우 간단히 작성히 용이.","위치는 웹문서 어디든 상관없으며 삽입된 위치 그자리에서 바로 스크립트가 실행된다.","script 는 하나의 문서에 여러개 사용할수 있다.","자바스크립트는 웹문서에서 이미지나 텍스트 등의 요소를 제어하는 경우가 많으므로 해당 요소들을 모두 표시후 실행하는 것이 좋다. 그래서 /body 직전에 추가 한다.","자바스크립트는 대소문자를 구별한다. 작성시 대소문자를 주의하자"]},{"i":"211-예제","l":"2.1.1. 예제","p":["내부 자바스크립트 사용하기","01","위의 예제처럼 문서 내부에 작성시 작성은 편하나 수정할때 필요한 코드를 찾아보기 어렵다."]},{"i":"212-예제","l":"2.1.2. 예제","p":["외부 자바스크립트 사용하기","02","참고이미지","웹문서에 자바스크립트 코드가 포함 되어있으면 웹브라우저는 어떤과정으로 해석하게 되는지 알아보자","웹브라우저는 !DOCTYPE html 을 보고 문서가 웹문서라는것을 알게 된다. 그리고 html 태그 사이의 내용을 html 표준에 맞춰 읽기 시작한다","html lang=ko html 태그의 순서와 포함 관계를 확인한다. head 태그와 body 태그 사이에 마크업 되어있는 요소를 확인하며 태그간의 관계를 분석한다.","태그의 분석이 끝나면 style 태그의 정보를 분석한다.","script 태그를 웹브라우저에 내장된 자바스크립트 해석기로 넘긴다. 자바스크립트 해석기에서는 script 사이의 소스를 해석","2에서 분석한 html 와 3에서 분석한 css 정보를 웹 브라우저 화면에 표시","자바스크립트 텍스트 클릭시 브라우저에서 해석한 자바스크립트의 실행결과를 화면에 표시함"]},{"l":"3. 자바스크립트의 기본 용어","p":["설명ppt❤","자바스크립트의 명령어는 식(expression)과 문 (statement) 으로 나뉜다.","식이란","값을 만들어 낼수 있는 모든것","변수에 저장이 가능함","문이란","명령","끝에 ; 를 붙인다.","조건문, 제어문...","넓은 의미에서 '문'은 값이나 식을 포함한다"]},{"i":"301-예제","l":"3.0.1. 예제","p":["자바스크립트의 식 작성하기","[03]"]},{"l":"4. 입출력하기"},{"i":"41-알림창","l":"4.1. 알림창","p":["사용자에게 알림메시지를 띄우는 함수","alert(메시지)"]},{"i":"411-예제","l":"4.1.1. 예제","p":["04"]},{"i":"42-확인창","l":"4.2. 확인창","p":["사용자에게 확인이나 취소의 의사결정을 전달받을수 있는 함수","conform(메시지)"]},{"i":"421-예제","l":"4.2.1. 예제","p":["05"]},{"i":"43-프롬프트창","l":"4.3. 프롬프트창","p":["사용자에게 텍스트형태의 데이터를 입력받을수 있는 함수","prompt(메시지) 또는 prompt(메시지,기본값)"]},{"i":"431-예제","l":"4.3.1. 예제","p":["06"]},{"i":"44-documentwrite","l":"4.4. document.write","p":["document (웹문서).write(쓰다)명령문","prompt(메시지) 또는 prompt(메시지,기본값)"]},{"i":"441-예제","l":"4.4.1. 예제","p":["07"]},{"i":"442-예제","l":"4.4.2. 예제","p":["08"]},{"i":"4421--식별자","l":"4.4.2.1. ∎ 식별자","p":["08 예제의 name 과 같은 변수명을 우리는 식별자라고 한다.","식별자: 프로그래밍 언어에서 이름을 붙일 때 사용하는 단어.","주로 변수명이나 함수명 등으로 사용","• 키워드 사용 불가","• 숫자로 시작 불가","• 특수 문자는 _와 $만 허용","• 공백 문자를 포함 불가","식별자를 만드는 일반적인 관례","• 클래스의 이름은 항상 대문자로 시작","• 변수와 인스턴스, 함수, 메소드의 이름은 항상 소문자로 시작","• 여러 단어로 이루어진 식별자는 각 단어의 첫 글자를 대문자"]},{"i":"4422--식별자-표기로-구분하는-표현식","l":"4.4.2.2. ∎ 식별자 표기로 구분하는 표현식","p":["구분","단독으로 사용","다른 식별자와 사용","식별자 뒤에 괄호 없음","변수","속성","식별자 뒤에 괄호 있음","함수","메소드"]},{"i":"45-consolelog","l":"4.5. console.log","p":["console.log()","괄호안의 내용을 콘솔 창에 표시","콘솔 창은 웹 브라우저의 개발자 도구 창에 포함된 공간으로 오류를 발견한거나 변수값을 확인할수 있다.","console.log() 의 소괄호 내에 따옴표를 넣어 텍스트를 표시하거나 식별자를 넣어 값을 출력해 볼수 있다."]},{"i":"451-예제","l":"4.5.1. 예제","p":["09"]},{"i":"46-오류확인","l":"4.6. 오류확인","p":["실행결과가 나오지 않을경우 콘솔창을 활용하여 오류를 확인하자"]},{"i":"461-461-예제","l":"4.6.1. 4.6.1 예제","p":["10-quiz","10-result"]},{"i":"47-자바스크립트-코딩-컨벤션convention","l":"4.7. 자바스크립트 코딩 컨벤션(convention)","p":["자바스크립트는 문법에 맞게 코딩하는 것도 중요하지만 가독성을 유지하는 것도 중요하다.","코드의 가독성을 유지하려면 규칙을 지켜야 한다.","이런 코딩 규칙을 코딩 컨벤션, 코딩 스타일가이드 라고 한다."]},{"i":"471-구글의-스타일가이드","l":"4.7.1. 구글의 스타일가이드"},{"i":"472-에어비앤비의-스타일가이드-공식","l":"4.7.2. 에어비앤비의 스타일가이드-공식"},{"i":"473-에어비앤비의-스타일가이드-번역","l":"4.7.3. 에어비앤비의 스타일가이드-번역"},{"i":"474-자바스크립트-소스를-작성할때-지켜야할-규칙","l":"4.7.4. 자바스크립트 소스를 작성할때 지켜야할 규칙"},{"i":"4741-들여쓰기","l":"4.7.4.1. 들여쓰기","p":["HTML, CSS 처럼 자바스크립트의 소스코드 작성시에도 들여쓰기를 하여 소스간의 포함관계를 표시한다.","들여쓰기는 공백4칸에서 2칸을 사용한다."]},{"i":"4742-세미콜론","l":"4.7.4.2. 세미콜론","p":["단문의 경우 세미콜론을 생략해도 실행은 된다.","하지만 육안으로 쉽게 문장의 구분을 식별할수 있게 하기위해 세미콜론을 하도록 한다.","소스는 읽기 쉽도록 한줄에 한문장만 작성한다.","[11]","들여쓰기는 공백4칸에서 2칸을 사용한다."]},{"i":"4743-공백의-사용","l":"4.7.4.3. 공백의 사용","p":["예약어, 연산자, 값 사이에 공백을 넣어 쉽게 식별할수 있게 한다.","[12]"]},{"i":"4744-주석의-활용","l":"4.7.4.4. 주석의 활용","p":["소스코드를 잘 설명하는 주석을 작성한다","[13]"]},{"i":"4745-식별자의-규칙","l":"4.7.4.5. 식별자의 규칙","p":["식별자(identifier) : 변수, 함수, 속성등을 구별하기 위해 이름을 붙인 단어"]},{"i":"47451-예시","l":"4.7.4.5.1. 예시","p":["[14]"]},{"i":"47452-규칙","l":"4.7.4.5.2. 규칙"},{"i":"47453-관례","l":"4.7.4.5.3. 관례"},{"i":"474531-예시","l":"4.7.4.5.3.1. 예시","p":["[15]"]}],[{"l":"2. 기본문법"},{"l":"목차","p":["1. 변수","1.1. 예제 선언과 할당 [01]","1.2. 예제 [02]","2. 자료형","2.1. 개요","2.2. 종류","2.3. 원시형","2.3.1. 예제[03]","2.4. 참조형","2.4.1. 예제 [04]","3. 연산자","3.1. 연산자의 종류","3.1.1. 추가연산자(병합연산자 nullish)","3.2. 산술연산자","3.2.1. 산술연산자의 기본활용 예제 [05]","3.2.2. 산술연산자의 자료형 활용예제 [06]","3.2.3. 산술연산자의 자료형 활용예제 [07]","3.2.4. 증가연산자예제 [08]","3.3. 할당연산자","3.3.1. 예제-[08]","3.4. 비교연산자","3.4.1. 예제-[09]","3.5. 논리연산자","3.5.1. 예제-[10]","3.5.2. 마무리문제-[11]","3.5.3. 마무리문제-[12]","3.6. 조건부연산자","3.6.1. 예제-[13]","3.6.2. 마무리문제-[14]","3.6.3. 마무리문제-[15]","3.7. 연산자의 우선순위","4. 제어문","4.1. 조건문","4.1.1. if","4.1.1.1. if-예제[16]","4.1.1.2. if-예제[17]","4.1.1.3. if-마무리문제[18]","4.1.2. if~else","4.1.2.1. if-else-예제[19]","4.1.2.2. if-else-마무리문제[20]","4.1.3. if~else if","4.1.3.1. if~else if-예제[21]","4.1.3.2. if~else if-마무리문제[22]","4.1.4. 삼항연산자를 활용한 조건문","4.1.4.1. if~else if-마무리문제[23]","4.1.5. 논리연산자를 활용한 조건문","4.1.5.1. OR 연산자-예제[24]","4.1.5.2. AND 연산자-예제[24]","4.1.5.3. NOT 연산자-예제[25]","4.2. 선택문- 4.2.0.1. switch-예제[26]","4.3. 실습문제[27]","4.4. 반복문","4.4.1. for","4.4.1.1. for-예제[28]","4.4.1.2. for-예제[29]","4.4.1.3. 중첩 for-예제[30]","4.4.1.4. 배열과 함께 사용하는 for in","4.4.1.5. 배열과 함께 사용하는 for of","4.4.2. while","4.4.2.1. while-예제[33]","4.4.2.2. while-예제[34]","4.4.3. do~while","4.4.3.1. do~while-예제[35]","4.4.4. break/continue","4.4.4.1. break/continue-예제","4.5. 마무리문제-[38]","5. 마무리문제"]},{"l":"1. 기본문법"},{"l":"1. 변수"},{"i":"11-예제-선언과-할당-01","l":"1.1. 예제 선언과 할당 [01]"},{"i":"12-예제-02","l":"1.2. 예제 [02]","p":["나이계산 프로그램을 만들어봅시다.","문제","정답"]},{"l":"2. 자료형"},{"i":"21-개요","l":"2.1. 개요","p":["\uD83D\uDEA9 자료형이란?","자료(data): 컴퓨터에서 처리할수 있는 모든 것","자료형(data type): 자료를 형태별로 분류해 놓은것"]},{"i":"22-종류","l":"2.2. 종류","p":["---","---------------","값이 없음을 의미. 변수에 명시적으로 할당해 사용.","기본(원시) 유형","논리적인 값을 나타내며 true 와 false 두 가지 값을 가짐.","문자열을 나타내는 데이터 타입. 0개 이상의 16비트 유니코드 문자로 구성.","변수가 선언되었으나 초기화되지 않았을 때의 값.","복합(참조) 유형","설명","순서가 있는 요소들의 집합을 나타냄. 배열 요소에 접근하는 것은 대괄호([])를 사용하여 인덱스로 접근.","숫자를 나타내는 데이터 타입. 정수 및 부동소수점 숫자를 포함.","실행 가능한 코드 블록을 가지며, 기능을 반복해서 사용할 수 있음.","예시","자료형","종류","특수 유형","Array","Boolean","Function","function sayHello() { alert('Hello!'); }","JavaScript의 객체를 나타냄. 객체는 이름과 값으로 구성된 프로퍼티들의 집합.","null","Number","Object","String","undefined","var arr = [1, 2, 3];","var isTrue = false;","var num = 123;","var obj = {name: John, age: 30};","var str = Hello World;","var x; console.log(x); // 출력: undefined","var y = null; console.log(y); // 출력: null"]},{"i":"23-원시형","l":"2.3. 원시형","p":["typeof: 자료형을 확인하는 단항 연산자인 typeof와 함께 알아보자"]},{"i":"231-예제03","l":"2.3.1. 예제[03]"},{"i":"24-참조형","l":"2.4. 참조형","p":["원시형과 참조형의 차이는 쉽게 아래처럼 값을 여러개 나누어 저장할수 있다는 것에 있다.","alt","▲ 원시타입은 한개의 물건을 저장하는 수납박스","▲ 참조타입은 한번에 여러개의 물건을 저장하는 수납박스이다"]},{"i":"241-예제-04","l":"2.4.1. 예제 [04]"},{"l":"3. 연산자","p":["연산자란? 프로그램에서 특정한 동작을 하도록 지시하는 기호.","프로그래밍에서 연산이란 사칙연산은 물론 문자열을 연결해서 새로운 문자열을 만들고 값의 크기를 비교하는 등의 여러가지 동작을 의미한다. 이런 연산을 지시하는 기호가 연산자이다.","산술,관계,할당,논리,부정,삼항,비트,단항,등이 있다."]},{"i":"31-연산자의-종류","l":"3.1. 연산자의 종류","p":["-","--","-=",", =_, , =",",|, !","!=","!==","*","*=","/","/=","%","%=","+","++","+=","=","==","===","감소 (값에서 1을 뺌)","값을 변수에 할당함","곱셈","기존 값에 값을 곱하고 결과를 변수에 할당함","기존 값에 값을 더하고 결과를 변수에 할당함","기존 값에서 값을 빼고 결과를 변수에 할당함","기존 값으로 값을 나누고 결과를 변수에 할당함","기존 값으로 나머지 계산 후 결과를 변수에 할당함","나눗셈","나머지 계산","논리 연산자","대입 연산자","덧셈","동등 비교 (값이 같은지 확인)","부등 비교 (값이 다른지 확인)","부일치 비교 (값과 타입이 모두 다른지 확인)","비교 연산자","뺄셈","산술 연산자","설명","연산자","연산자 유형","일치 비교 (값과 타입이 모두 같은지 확인)","증가 (값에 1을 더함)","크기/같음을 비교하는 관계 연산자들","AND, OR, NOT 로직 구현"]},{"i":"311-추가연산자병합연산자-nullish","l":"3.1.1. 추가연산자(병합연산자 nullish)","p":["변수나 표현식이 null 또는 undefined인 경우에만 대체 값을 반환하는 연산자"]},{"i":"32-산술연산자","l":"3.2. 산술연산자"},{"i":"321-산술연산자의-기본활용-예제-05","l":"3.2.1. 산술연산자의 기본활용 예제 [05]"},{"i":"322-산술연산자의-자료형-활용예제-06","l":"3.2.2. 산술연산자의 자료형 활용예제 [06]","p":["표현식","결과","문자형+문자형","문자형","문자형+숫자형","문자형과 + 연산자를 사용하면 모든 자료형이 문자형으로 변환된다.","\uD83D\uDD11 자바스크립트는 변수가 가지는 값에 따라 그 타입이 동적으로 결정되는 동적 타이핑(dynamic typing) 언어이다.","동적 타이핑의 장점은 유연성이다.","변수의 타입이 자유롭기 때문에 언제든지 동적인 값에 따라 변수의 타입이 자동으로 바뀔 수 있으므로 유연하고 생산적인 코딩이 가능하다.","하지만 동적 타이핑으로 인해 변수의 타입을 예측하기 어려우므로, 이에 따라 예상하지 않은 에러가 발생할 수도 있다.","이를 보완한 것이 타입스크립트 이다."]},{"i":"323-산술연산자의-자료형-활용예제-07","l":"3.2.3. 산술연산자의 자료형 활용예제 [07]","p":["+ 는 문자 자료형으로 연산하였다.","+ 는 숫자 자료형으로 연산하였다.","백틱을 사용하면 표현식과 문자를 쉽게 연결할수 있다. (Template literals)+++","변수에 붙이면 1씩 증가/감소 시키는 연산자","설명","앞에 붙이면 전위연산, 뒤에 붙이면 후위 연산이라고 하며 위치에 따라 결과가 다르다","종류","후위 연산은 결과를 다음 호출시 반환하고 전위 연산은 결과를 즉시 반환한다.","A = --A","A = ++ A","A = A--","A = A++","A에 A에 1을 더한값을 재할당 전위연산","A에 A에 1을 더한값을 재할당 후위연산","A에 A에 1을 뺀값을 재할당 전위연산","A에 A에 1을 뺀값을 재할당 후위연산","const add = x + y;","document.write( 국어점수: $ 수학점수: $ 합계: $);","document.write('국어 점수 :' + x + 'br');"]},{"i":"33-할당연산자","l":"3.3. 할당연산자","p":["종류","설명","=","우항을 좌항에 할당","+=","좌항에 우항을 더한후 좌항에 재할당"]},{"i":"331-예제-08","l":"3.3.1. 예제-[08]","p":["+= 연산자는 가산후 재할당 한다."]},{"i":"34-비교연산자","l":"3.4. 비교연산자","p":["설명","종류","주로 조건문에 사용한다.","A!== B","A!=B","A<=B","A<B","A== B","A=== B","A>=B","A>B","A가 B보다 작거나 같다","A가 B보다 작다","A가 B보다 크거나 같다","A가 B보다 크다","A와 B가 같다","A와 B가 같지 않다","A와 B가 자료형까지 같다","A와 B가 자료형까지 같지 않다"]},{"i":"341-예제-09","l":"3.4.1. 예제-[09]","p":["x=10, y=20 입니다.","document.write(x = y); 10은 20보다 크거나 같다는 false 입니다","document.write(x = y); 10은 20보다 작거나 같다는 true 입니다","document.write(x != y); 10은 20과 같지 않다는 true 입니다","document.write(x == y); 10은 20과 같다 는 false 입니다","document.write(x !== y); 10은 20과 자료형까지 같지 않다는 true 입니다","document.write(x === y); 10은 20과 자료형까지 같다 는 false 입니다"]},{"i":"35-논리연산자","l":"3.5. 논리연산자","p":["종류","설명","A&&B","A와 B가 모두 True일 경우에만 True","A ∣∣ B","A또는 B가 True일 경우 True","!A","A가 True이면 False, False이면 True"]},{"i":"351-예제-10","l":"3.5.1. 예제-[10]","p":["t/f => false","t/f => true","t => false"]},{"i":"352-마무리문제-11","l":"3.5.2. 마무리문제-[11]","p":["20대 대상의 소개팅을 준비 중입니다. 남성은 모집이 완료 되었지만 여성은 아직 모집이 다 되지 않았네요. prompt메서드를 활용하여 참가 희망자의 성별과 나이를 확인합니다. 20대 여성이라면 결과값이 true로, 아니라면 결과 값으로 false가 나오게 만드세요","MDN \uD83D\uDD17 prompt(message, default);"]},{"i":"353-마무리문제-12","l":"3.5.3. 마무리문제-[12]","p":["prompt 메서드를 활용하여 국어, 영어, 수학 점수를 입력 받으세요. 평균이 70점 이상이고 각 과목별 점수가 60점 이상이면 true를 아니라면 false를 출력합니다.","엄청쉽다"]},{"i":"36-조건부연산자","l":"3.6. 조건부연산자","p":["문법","설명","(조건) ? A : B","조건 ? 참이면 A실행 : 거짓이면 B실행"]},{"i":"361-예제-13","l":"3.6.1. 예제-[13]"},{"i":"362-마무리문제-14","l":"3.6.2. 마무리문제-[14]","p":["경아는 오늘 교통비 3,000원 식비 7,000원, 음료비 2,000원을 사용했습니다. 하루 용돈인 10,000원을 초과했을 경우 \"000원 초과\"라고 출력되거나, 아니면 \"돈 관리 참 잘했어요!\"라고 출력되도록 해보세요","정답틀림"]},{"i":"363-마무리문제-15","l":"3.6.3. 마무리문제-[15]","p":["방문자에게 질의응답 창(prompt)을 이용하여 신장과 몸무게를 입력받아 옵니다. 방문자의 몸무게가 적정 몸무게보다 이상일 경우 \"적정 몸무게 이상\", 미만일 경우에는 \"적정 몸무게 미달\"로 출력되도록 하세요. 적정 몸무게 공식은 '몸무게=(신장-100)*0.9'입니다","정답틀림"]},{"i":"37-연산자의-우선순위","l":"3.7. 연산자의 우선순위","p":["_,/,%,+,-","--,++,!",",=,,=,==,===,!==",",||","( )","=,+=,-+,_=,/=,%=","1.","2. 단항 연산자","3. 산술 연산자","4. 비교 연산자","5. 논리 연산자","6. 대입(복합 대입)연산자","연산자","우선순위","이 규칙에 따라 표현식의 평가 순서와 결과가 달라질 수 있습니다.","자바스크립트에서 연산자 우선순위는 표현식 내에서 연산자가 어떤 순서로 평가되는지를 결정하는 규칙입니다."]},{"l":"4. 제어문","p":["제어문 에는 조건문, 선택문, 반복문 이 있습니다.","조건문이란 조건에 따라 실행이 달라지게 할 때 사용되는 제어문입니다.","자바 스크립트의 조건문 에는 if, else, else if 가 있습니다.","선택문이란 값에 따라서 실행 내용을 선택하여 실행 할때 사용되는 제어문입니다.","자바 스크립트의 선택문 에는 switch 가 있습니다.","반복문이란 주어진 조건에 따라서 문장을 반복 실행 할때 사용되는 제어문 입니다","자바 스크립트의 반복문 에는 for, while, do while 등이 있습니다."]},{"i":"41-조건문","l":"4.1. 조건문"},{"i":"411-if","l":"4.1.1. if","p":["프로그래밍을 할때는 특정 조건과 명령에 따라 실행 순서를 정해야 합니다.","이때 특정 조건이 맞는지 확인하기 위해 조건문 을 사용하며 프로그래밍 시 가장 빈번히 사용하는 구문입니다.","자바스크립트의 조건문과 조건 연산자에 대해 학습하겠습니다.","if 문이나 if~ else문을 사용하여 스크립트 안에서 조건을 체크할수 있습니다. if문은 소괄호 안의 조건을 체크하여 결괏값이 true 면 중괄호 내부의 실행문을 실행하고 조건의 결과가 false 이면 중괄호의 실행문을 무시합니다. 아래는 if 문의 기본 문법 예시입니다."]},{"i":"4111-if-예제16","l":"4.1.1.1. if-예제[16]","p":["if문은 조건이 true 일때만 실행할수 있으므로 false 일때도 명령을 하려면 실행문을 두번 작성해야 하는 번거로움이 있습니다. 이럴때 else 를 사용하면 됩니다. 아래는 if ~ else if 문의 기본 문법 예시입니다."]},{"i":"4112-if-예제17","l":"4.1.1.2. if-예제[17]","p":["질의응답 창(prompt)을 이용하여 시험 점수를 입력 받아 저장한 후 만일 ⚡70점보다 크거나 같으면 '합격'⚡이라는 메시지를 출력하시오","정답틀림","GPT 한테 물어보세요"]},{"i":"4113-if-마무리문제18","l":"4.1.1.3. if-마무리문제[18]","p":["사용자로부터 입력받은 숫자가 3의 배수인지를 확인후 결과를 출력하는 프로그램을 작성하시오⚡","3의 배수는 3으로 나눈 나머지가 0일 꺼에요 \uD83E\uDD14","사는게 쉽지 않아요","GPT 한테 물어보세요"]},{"i":"412-ifelse","l":"4.1.2. if~else","p":["if문은 조건이 true 일때만 실행할수 있으므로 false 일때도 명령을 하려면 실행문을 두번 작성해야 하는 번거로움이 있습니다. 이럴때 else 를 사용하면 됩니다. 아래는 if ~ else if 문의 기본 문법 예시입니다."]},{"i":"4121-if-else-예제19","l":"4.1.2.1. if-else-예제[19]"},{"i":"4122-if-else-마무리문제20","l":"4.1.2.2. if-else-마무리문제[20]","p":["나이가 20세 이상이고, 30세 미만일 경우에는 '통과'라고 출력하고, 그렇지 않으면 '비통과'라고 출력하시오. \uD83D\uDC28","이상은 해당 숫자를 포함하고 미만은 해당 숫자를 포함하지 않아요"]},{"i":"413-ifelse-if","l":"4.1.3. if~else if","p":["조건이 복잡할 경우 if~ else if 를 사용하여 다중 조건을 판별할수 있습니다. 아래는 else if 문의 기본 문법 예시입니다."]},{"i":"4131-ifelse-if-예제21","l":"4.1.3.1. if~else if-예제[21]","p":["사용자가 입력한 숫자가 3의 배수인지를 판별하여 알려주고 취소를 누를 경우 입력이 취소됨을 표시하는 프로그램을 작성해봅시다","순서도","프로그래밍 작업시 소스의 순서나 계획을 순서도로 작성해보면 코드의 이해와 작성이 수월해집니다. 아래는 사용자가 입력한 숫자가 3의 배수인지를 판별하여 알려주고 취소를 누를 경우 입력이 취소됨을 표시하는 프로그램의 순서도 입니다."]},{"i":"4132-ifelse-if-마무리문제22","l":"4.1.3.2. if~else if-마무리문제[22]","p":["사용자로 취득점수를 입력 받습니다. 점수가 90점 이상일 경우 A학점, 80점 이상일경우 B학점, 70점 이상일경우 C학점 , 60점 이상일 경우 D학점, 60점 이하일 경우 F학점 메시지를 출력하는 프로그램을 작성하세요. \uD83D\uDC28"]},{"i":"414-삼항연산자를-활용한-조건문","l":"4.1.4. 삼항연산자를 활용한 조건문"},{"i":"4141-ifelse-if-마무리문제23","l":"4.1.4.1. if~else if-마무리문제[23]","p":["4.1.3.1. if~else if-예제[21] 의 if문을 삼항연산자로 작성하세요. \uD83D\uDC28"]},{"i":"415-논리연산자를-활용한-조건문","l":"4.1.5. 논리연산자를 활용한 조건문","p":["두조건이 true 일 경우와 조건 1개만 true 일 경우 처럼 여러 경우의 수를 따질때는 논리 연산자를 사용합니다."]},{"i":"4151-or-연산자-예제24","l":"4.1.5.1. OR 연산자-예제[24]","p":["\uD83D\uDD11OR 연산자는 || 를 사용하며 우항의 2개중 true가 하나라도 있으면 결과를 true로 반환합니다.","OR 연산자를 사용하여 50보다 작은 숫자 2개를 입력받아 둘 중 하나가 10보다 작은 지를 판단하는 프로그램을 작성해 봅시다 \uD83D\uDC28"]},{"i":"4152-and-연산자-예제24","l":"4.1.5.2. AND 연산자-예제[24]","p":["\uD83D\uDD11AND 연산자는 를 사용하며 우항의 2개중 false가 하나라도 있으면 결과를 false로 반환합니다.","AND 연산자를 사용하여 입력한 두개의 숫자가 50보다 작은지 체크하는 프로그램을 작성해봅시다.\uD83D\uDC28"]},{"i":"4153-not-연산자-예제25","l":"4.1.5.3. NOT 연산자-예제[25]","p":["\uD83D\uDC38 NOT 연산자는 ! 를 사용하며 청개구리 처럼 결과값을 반대로 반환합니다. 결과가 true 이면 false 를 결과가 false 이면 true 를 반환합니다.","NOT 연산자를 사용하여 사용자가 입력한 값이 null 이 아닌지를 체크해 봅시다.\uD83D\uDC28","조건 계산을 빠르게 하는 방법","조건이 2가지 이상일 경우 동시에 함께 체크하는 조건식을 만들때는 첫번째 조건을 보고 빠르게 판단할수 있도록 작성해야 합니다. 예를 들어 다음과 같은 조건식의 경우를 살펴보겠습니다.(( x === 10 ) ( y === 20 )) AND 연산자는 조건식이 둘 이상일 경우 하나만 false 라도 최종값이 false 입니다. 그러므로 첫번째 조건식의 결과를 false 로 작성할 경우 두번째 조건은 체크 하지 않고 바로 false 를 반환하게 됩니다. 이런 식으로 AND 연산자 사용시 false 를 반환하게 될 확률이 높은 식을 첫번째 조건으로 사용하게 된다면 컴퓨터의 일을 덜어주는 셈이 됩니다. 반대로 OR 연산자의 경우 하나만 true 라도 최종 값이 true 이기 때문에 첫번째 조건으로 true 를 반환하는 식을 작성한다면 효율적인 코드를 작성할수 있습니다."]},{"i":"42-선택문","l":"4.2. 선택문","p":["선택문이란 하나의 변수 값을 여러 개의 값과 비교하여 해당하는 case 절의 코드를 실행하는 제어문 입니다.","변수에 저장된 데이터(data)와 정확히 일치되는 경우(case)가 있는지 검사 후 일치하는 데이터가 있을 때","해당 실행문을 수행한 뒤 마지막의 break문으로 반복을 끝냅니다.","일치되는 값이 없을 때에는 default에 해당하는 실행문을 수행한 뒤 문장을 마칩니다."]},{"i":"4201-switch-예제26","l":"4.2.0.1. switch-예제[26]","p":["switch 문을 이용해 session 값을 체크하여 입력받은 값이","1이면 마케팅-201호, 2이면 개발-203호, 3이면 디자인-204호로","안내하는 프로그램을 작성해보자\uD83D\uDC28","\uD83D\uDC28스위치문제"]},{"i":"43-실습문제27","l":"4.3. 실습문제[27]","p":["대관서비스 앱을 제작 중입니다. 사용자로 부터 총 입장객과 한줄에 앉을 인원수를 입력받아","총 몇개의 줄이 필요한지 출력해주세요","전체 입장객의 수가 10명이고 한줄에 2명씩 앉아야 한다면 10/2 를 하여 총 5줄이 필요하겠죠?","필요한 값들을 변수로 지정하고 프로그램을 작성해보세요."]},{"i":"44-반복문","l":"4.4. 반복문","p":["반목문이란 주어진 조건에 따라서 문장을 반복 실행 하게 하는 제어문입니다.","자바 스크립트에서 반복문은 for문, while문, do while문 이 있습니다."]},{"i":"441-for","l":"4.4.1. for","p":["반복문 사용시 얼마나 편리해지는지 체험해 보겠습니다."]},{"i":"4411-for-예제28","l":"4.4.1.1. for-예제[28]","p":["for 문은 초기값->조건->명령->증가식의 순서로 수행합니다."]},{"i":"4412-for-예제29","l":"4.4.1.2. for-예제[29]"},{"i":"4413-중첩-for-예제30","l":"4.4.1.3. 중첩 for-예제[30]","p":["동적요소추가 후 스타일반영"]},{"i":"4414-배열과-함께-사용하는-for-in","l":"4.4.1.4. 배열과 함께 사용하는 for in","p":["\uD83D\uDD17 배열학습하기[31]"]},{"i":"4415-배열과-함께-사용하는-for-of","l":"4.4.1.5. 배열과 함께 사용하는 for of"},{"i":"442-while","l":"4.4.2. while","p":["while문은 조건이 true인 동안 실행문을 반복 합니다. 조건을 먼저 체크한 후 실행하기 때문에 조건이 false 라면 한번도 실행하지 않을수도 있습니다."]},{"i":"4421-while-예제33","l":"4.4.2.1. while-예제[33]","p":["while 문을 사용하여 1부터 10까지 반복하여 출력해봅시다"]},{"i":"4422-while-예제34","l":"4.4.2.2. while-예제[34]","p":["while 문을 사용하여 1부터 10까지의 합을 계산해보세요","let x = 0과 let total = 0: 변수 x와 total을 선언하고 각각 초기값으로 0을 할당합니다.","while (x 10) {...}: while 반복문을 사용하여 조건식인 x < 10이 참인 동안 아래의 코드 블록이 반복 실행됩니다.","x++: 반복문 내에서 x 값을 증가시킵니다. 이는 x 값을 1씩 증가시키는 역할을 합니다.","total = total + x: total 변수에 현재의 x 값을 더해줍니다. 이로써 각 숫자들이 계속해서 누적되어 더해지게 됩니다.","document.write(x): 현재의 x 값을 웹 페이지에 출력합니다.","if (x != 10) document.write(+): 만약 현재의 x 값이 10이 아니라면 \"+\" 문자를 웹 페이지에 출력합니다.","숫자 사이에 + 문자를 출력하기 위한 것으로 마지막 숫자는 출력되지 않게 조건을 작성했습니다.","반복문이 종료되면, \"=`\" 문자열과 함께 total 변수의 값을 웹 페이지에 출력합니다.","\"1+2+3+4...=\" 과 같은 형태로 시작하여, 마지막으로 계산된 total 값(55)을 추가로 표시합니다."]},{"i":"443-dowhile","l":"4.4.3. do~while","p":["기본적으로 while 문과 같이 조건을 체크하여 반복하는 반복문 입니다.","하지만 do~ while은 실행후 조건을 체크하기 때문에 조건이 false 라도 무조건 한번은 실행합니다."]},{"i":"4431-dowhile-예제35","l":"4.4.3.1. do~while-예제[35]","p":["do~ while 문으로 사용자로부터 숫자를 입력받아서 1부터 해당 숫자까지의 합을 계산하고 출력하는 프로그램을 작성해 봅시다","let number; let sum = 0;: 변수 number와 sum을 선언하고 초기값으로 각각 undefined와 0을 할당합니다.","do { ... } while (isNaN(number));: do-while 반복문을 사용하여 중괄호 안의 코드 블록이 최소한 한 번 실행되도록 합니다. 이후 조건식인 isNaN(number)가 참인 동안 반복문이 계속 실행됩니다.","number = prompt(숫자를 입력하세요:);: 사용자에게 '숫자를 입력하세요'라는 메시지와 함께 대화상자를 표시하고, 사용자가 입력한 값을 문자열로 받아 변수 number에 저장합니다.","for 반복문을 사용하여 1부터 해당 숫자까지의 합(sum)을 계산합니다.","반복문의 시작값은 1부터 시작하며, 종료 조건은 parseInt() 함수를 통해 문자열로 받은 숫자(number)로 변환하여 설정됩니다.","매번 반복할 때마다 현재의 값을 누적하여 (+=) 변수 sum에 더해줍니다. sum=sum+number 과 같습니다.","반복문 종료 후, \"입력한 숫자들의 합은 x입니다.\"라는 메시지를 웹 페이지에 출력합니다.","여기서 x는 루프에서 계산된 총합(sum) 값입니다."]},{"i":"444-breakcontinue","l":"4.4.4. break/continue","p":["반복문의 실행문들은 수행과정에서 break문을 만나면 해당 반복문을 종료합니다. break문은 반복문 등을 정지시킬 때에 사용합니다.","반복문 문장 안에 사용하여 반복 실행 중에 조건문으로 되돌아 가게 해주는 역할을 합니다 즉, 반목문에서 특정 부분을 실행하지 않게 하고 싶을 때 간단하게 사용할 수 있습니다."]},{"i":"4441-breakcontinue-예제","l":"4.4.4.1. break/continue-예제"},{"i":"45-마무리문제-38","l":"4.5. 마무리문제-[38]","p":["자리배치도를 만드세요","27번 문제에서 작성했던 조건문을 활용하여 좌석의 번호를 출력하는 프로그램을 작성하세요"]},{"l":"5. 마무리문제","p":["다음 조건을 확인하여 사용자가 입력한 숫자가 4의 배수인지 확인하는 프로그램을 작성하세요","프롬프트 문을 이용하여 숫자를 입력 받으세요","[취소] 버튼을 누르면 결과를 출력하지 않습니다.","입력받은 숫자를 4로 나눈 나머지가 0이면 4의 배수이고 아니면 4의 배수가 아닙니다.","숫자를 입력 받은후 1부터 그 숫자까지 3의 배수를 모두 출력합니다. 그리고 출력된 3의 배수가 총 몇개인지 알려주는 프로그램을 작성하세요","반복문을 이용해서 1부터 입력받은 숫자까지 실행합니다.","3의 배수인지 알려면 입력받은 숫자를 3으로 나눈 나머지가 0인지 확인합니다.","카운터의 갯수를 함께 출력합니다."]}],[{"l":"3. 함수와 이벤트"},{"l":"목차","p":["1. 함수","1.1. 함수의 선언과 호출- 1.1.0.1. 예제-01- 1.1.0.2. 함수의 선언-예제[02]- 1.1.0.3. 함수의 호출-예제[02]","1.2. 변수의 호이스팅","1.2.1. 지역변수","1.2.1.1. 예제[02]","1.2.2. 전역변수","1.2.2.1. 예제[03]","1.2.3. var의 호이스팅","1.2.3.1. 예제[04]","1.2.4. var의 재선언과 재할당","1.2.4.1. 예제 [05]","1.2.5. let 과 const","1.2.5.1. let-예제[06]","1.2.5.2. const-예제[07]","1.3. 재사용가능한 함수 만들기","1.3.1. 매개변수,인수,return","1.3.1.1. 그림으로 이해하는 매개변수,인수,return","1.3.1.2. 매개변수를 사용한 함수만들기-예제-[08]","1.3.2. 매개변수의 기본값 지정하기","1.3.2.1. 매개변수의 기본값 지정하기-예제[09]","1.3.3. 실습문제[10]","1.4. 함수표현식","1.4.1. 익명함수-예제[11]","1.4.2. 즉시실행함수-예제[12]","1.4.3. 화살표함수-예제[13]","2. 이벤트","2.1. 이벤트","2.1.1. 마우스이벤트","2.1.2. 키보드이벤트","2.1.3. 문서로딩이벤트","2.1.4. 폼이벤트","2.2. 이벤트처리기","2.2.1. HTML 속성을 이용한 방식-버튼 클릭시 알림창표시-예제[14]","2.2.2. 버튼 클릭시 배경변경-예제[15]","2.2.3. 버튼 클릭시 상세설명 표시-예제[16]","2.2.4. DOM을 이용한 방식-버튼클릭시 글자변경-예제[17]","2.3. 마무리문제"]},{"l":"1. 함수"},{"i":"11-함수의-선언과-호출","l":"1.1. 함수의 선언과 호출"},{"i":"1101-예제-01","l":"1.1.0.1. 예제-01","p":["두수를 더하는 함수를 만들어 봅시다"]},{"i":"1102-함수의-선언-예제02","l":"1.1.0.2. 함수의 선언-예제[02]","p":["함수의 선언에 대해 알아보겠습니다.","함수사용의 가장 기본적인 방법은 함수를 만들때 이름을 붙이고 필요할때 마다 함수의 이름을 불러 실행하는 것입니다.","함수가 어떤 명령을 처리할지 미리 알려주는 것 을 함수를 선언한다 혹은 정의한다 라고 합니다.","함수를 선언할 때는 함수마다 서로 다른 이름을 붙여 나중에 사용할때 알아보기 쉽도록 해야 합니다.","선언할때는 예약어 function 을 사용하고 { } 안에 실행문을 작성합니다.","함수를 선언해봅시다"]},{"i":"1103-함수의-호출-예제02","l":"1.1.0.3. 함수의 호출-예제[02]","p":["함수는 선언만으로 동작 하지 않습니다.","선언은 앞으로 자주할 동작에 대해 예약을 해 놓는 것이고 동작을 하려면 함수를 불러 줘야 합니다.","함수를 부르는 것 을 호출 한다 라고 합니다.","이전 예제에 이어서 작성해 봅시다","웹브라우저에서 자바스크립트 소스를 해석할때 함수 선언부분을 가장 먼저 합니다. 그래서 개발자가 원하는 곳에 함수를 선언해 놓기만 하면 선언 위치와 무관하게 함수를 실행할수 있습니다. 아래의 예시를 비교해 보면 함수를 호출, 선언하는 위치가 다르지만 둘다 문제없이 실행되는것을 볼수 있습니다.","함수의 선언 위치는 프로그램 흐름에 영향을 주지 않습니다.","때문에 일반적으로 한 파일내에 여러 함수 선언시 스크립트 소스의 앞부분이나 뒷부분에 함수 선언 부분을 모아놓고 필요할때 마다 호출해서 사용합니다."]},{"i":"12-변수의-호이스팅","l":"1.2. 변수의 호이스팅","p":["자바스크립트의 2023년 현재 표준 버전은 ES6 이며 최신 버전은 ES13 (ECMAscript 2022) 입니다.","변수를 선언하기 위해 사용하는 키워드인 let,const는 ES6에 새로 추가되었으며 이전에는 var 키워드만 사용하였습니다.","let과 const 의 등장배경과 더불어 let,const,var 의 특징에 대해 학습하겠습니다."]},{"i":"121-지역변수","l":"1.2.1. 지역변수","p":["변수나 함수,객체는 유효한 범위 가 있습니다. 우리는 그것을 스코프(scope) 라고 부릅니다.","함수 내에서 var 키워드와 함께 선언된 변수 를 지역변수 라고 부르며 지역 변수는 선언된 함수 내에서만 스코프를 가집니다."]},{"i":"1211-예제02","l":"1.2.1.1. 예제[02]","p":["지역변수 선언하기","변수 sum 이 정의 되지 않았다는 메시지가 출력됩니다 콘솔로그","함수 내에서 선언된 변수는 함수내에서만 유효하므로 함수 밖에서 접근할수 없습니다."]},{"i":"122-전역변수","l":"1.2.2. 전역변수","p":["전역변수는 적용범위의 제한 없이 스크립트 소스코드 전체에서 유효범위 를 갖습니다.","전역변수 는 함수 밖에서 선언 하거나 함수 내에서 var 키워드 없이 선언시 사용할수 있습니다."]},{"i":"1221-예제03","l":"1.2.2.1. 예제[03]","p":["전역변수 선언하기"]},{"i":"123-var의-호이스팅","l":"1.2.3. var의 호이스팅","p":["var 변수는 자바스크립트 해석기에서 따로 기억을 합니다.","그렇기 때문에 해석시 끌어올림(hosting) 현상이 발생하게 됩니다.","변수를 실행하기 전이지만 해석기에서 변수의 존재를 미리 저장해 두기 때문에 아래와 같은 문제가 발생하게 됩니다."]},{"i":"1231-예제04","l":"1.2.3.1. 예제[04]","p":["콘솔창 변수가 정의되지 않은 상황의 메시지 호이스팅이 발생하여 변수 y가 8번에서 선언되었음에도 선언은 되었으나 값이 미정인 상태라는 의미의 undefined 가 확인된다."]},{"i":"124-var의-재선언과-재할당","l":"1.2.4. var의 재선언과 재할당","p":["var 키워드로 선언한 변수는 호이스팅 외에도 재선언과 재할당 이 가능합니다.","선언 : 변수를 생성하기 위해 식별자를 지정하는 단계","할당 : 변수에 값을 넣는 단계","초기화 : 변수의 식별자에 값의 할당을 완료한 단계"]},{"i":"1241-예제-05","l":"1.2.4.1. 예제 [05]","p":["콘솔화면"]},{"i":"125-let-과-const","l":"1.2.5. let 과 const","p":["var 변수의 유연함으로 인해 프로그램의 작성시 예상치 못한 버그가 잦았으며 디버깅 시 원인을 찾는 것 또한 어려웠습니다.","그래서 ES6에서 블록레벨 에서만 사용할수 있는 let 과 const 가 등장하게 되었습니다.","블록이란 { } 를 의미합니다."]},{"i":"1251-let-예제06","l":"1.2.5.1. let-예제[06]","p":["let 키워드를 사용하여 변수를 선언해 봅시다. 1부터 10까지 더하는 함수를 작성합니다.","콘솔화면"]},{"i":"1252-const-예제07","l":"1.2.5.2. const-예제[07]","p":["const 키워드를 사용하여 변수(상수)를 선언해봅시다.","콘솔메시지에 이미 선언되었다는 메시지와 함께 오류가 반환됩니다.","콘솔화면","콘솔메시지에 초기화 할수없다는 메시지와 함께 오류가 반환됩니다.","전역변수는 최소한으로 사용합니다.","전역변수는 접근이 용이해 편리하지만 예상치 못한 곳에서 값이 변경될수 있으므로 버그가 발생할 확률이 높습니다.","var 변수는 함수의 시작부분에 선언합니다.","var 변수는 호이스팅이 발생하므로 함수의 시작부분에 선언하는것이 유지보수 하기 편하고 버그발생도 줄일수 있습니다.","for 문에서 변수 사용시 var 키워드는 사용하지 않습니다.","for 문 내의 중감식은 for문의 블록 내에서만 사용되는데 종종 var 변수로 선언하기도 합니다. var은 호이스팅이 발생하므로 다른 함수의 변수와 충돌을 일으킬수 있으니 let 키워드를 사용합니다."]},{"i":"13-재사용가능한-함수-만들기","l":"1.3. 재사용가능한 함수 만들기","p":["지금까지 alert(), log() 등의 함수를 사용하여 화면에 매번 다른 결괏값을 출력하는 명령을 수행했습니다.","이렇게 입력되는 내용을 (재료) 를 바꿔서 여러번 사용할수 있는 성질 을 함수의 '재사용성' 이라고 합니다.","\uD83D\uDD17설명PPT열기","명명함수(Function Declarations) : function 키워드로 선언하는 방식 ( 호이스팅 발생)","익명함수(Function Expressions) : 변수에 할당하는 방식","즉시실행함수(IIFE, Immediately Invoked Function Expression) : 선언과 동시에 실행하는 방식","화살표함수(Arrow Functions) : 축약표기방식"]},{"i":"131-매개변수인수return","l":"1.3.1. 매개변수,인수,return"},{"i":"1311-그림으로-이해하는-매개변수인수return","l":"1.3.1.1. 그림으로 이해하는 매개변수,인수,return","p":["아래의 믹서기는 어떤 것이든 재료만 넣으면 무조건 갈아서 섞어 줍니다.","이때 믹서기의 기능은 함수 입니다.","이때 재료는 인수 입니다.","이 믹서기는 재료를 넣는 투입구가 정해져 있습니다. 투입구가 매개변수 입니다.","그림으로 이해하는 매개변수,인수,return","믹서기로 섞은후 우리는 음료를 다른 그릇에 담습니다.","이때 믹서기가 생산한 결과를 리턴 이라고 합니다. 그림으로 이해하는 매개변수,인수,return"]},{"i":"1312-매개변수를-사용한-함수만들기-예제-08","l":"1.3.1.2. 매개변수를 사용한 함수만들기-예제-[08]","p":["매개변수를 사용한 함수를 작성해봅시다","자바스크립트 해석기가 function 이라는 키워드를 만나면 함수의 선언부 라는것을 인식하고 함수블록 `을 해석합니다. 아직 실행하지 않습니다.","6번의 addNumber(2, 3) 을 만나면 해석해 두었던 addNumber() 함수를 실행합니다.","addNumber() 함수는 매개변수 num1에 인수 2를 매개변수 num2에 인수 3 을 넘기고 두 수의 합을 sum 변수에 저장합니다.","return sum 함수의 실행이 완료되면 결과를 함수의 호출지점인 5번의 const result 에 전달합니다.","전달받은 결괏값을 result 상수에 저장합니다.","document.write('두 수를 더 한 값 : ' + result); result의 값을 화면에 출력합니다."]},{"i":"132-매개변수의-기본값-지정하기","l":"1.3.2. 매개변수의 기본값 지정하기"},{"i":"1321-매개변수의-기본값-지정하기-예제09","l":"1.3.2.1. 매개변수의 기본값 지정하기-예제[09]"},{"i":"133-실습문제10","l":"1.3.3. 실습문제[10]","p":["이전에 작성한 \uD83D\uDD171부터10까지 더하는 함수[06] 예제를 참고하여 사용자가 입력한 숫자까지 계속 더하는 함수를 만들어보세요","\uD83D\uDD17 MDN","prompt 함수로 반환받은 결괏값은 string 자료형으로 반환되므로 숫자연산이 불가합니다.","숫자 자료형으로 변환해주는 parseInt() 함수를 사용하세요"]},{"i":"14-함수표현식","l":"1.4. 함수표현식","p":["자바스크립트의 함수는 자료형 중의 하나로 취급되며 모든 식의 값으로 취급될수 있습니다.","\uD83D\uDD17함수 4종 다시보기 4가지 방식의 함수중 2~ 4번에 대해 학습하겠습니다."]},{"i":"141-익명함수-예제11","l":"1.4.1. 익명함수-예제[11]","p":["익명함수는 이름이 없는 함수를 의미합니다.","선언시 이름을 붙이지 않으며 변수에 할당하여 실행합니다.","template literal 내에서 공백을 여러개 표시할때에는 \\u00A0 를 작성합니다"]},{"i":"142-즉시실행함수-예제12","l":"1.4.2. 즉시실행함수-예제[12]","p":["일반적으로 함수는 선언후 필요할 때 호출하여 실행합니다.","하지만 상황에 따라 딱 한번 실행해야 하는 함수일 경우 선언과 동시에 실행을 시킬수 있습니다.","매개변수가 없는경우","매개변수가 있는경우"]},{"i":"143-화살표함수-예제13","l":"1.4.3. 화살표함수-예제[13]","p":["익명함수를 줄여쓰는 방식입니다","익명함수를 작성하여 화살표 함수로 변경해 봅시다."]},{"l":"2. 이벤트","p":["자바스크립트에서 이벤트는 웹 페이지에서 발생하는 특정한 동작이나 사건을 의미합니다.","사용자의 마우스 클릭, 키보드 입력, 페이지 로딩 완료, AJAX 요청 완료 등과 같은 다양한 상황에서 이벤트가 발생할 수 있습니다.","웹브라우저나 사용자가 행하는 어떤 동작을 이벤트라 칭하며 웹 브라우저 내에 새로운 페이지를 불러오는것도 이벤트에 해당합니다.","웹문서 영역 내에서 이루어 지는 동작 에 한해 이벤트라 하며 웹문서 영역을 벗어나 클릭하는 행위는 자바스크립트의 이벤트가 아닙니다."]},{"i":"21-이벤트","l":"2.1. 이벤트","p":["\uD83D\uDD17MDN"]},{"i":"211-마우스이벤트","l":"2.1.1. 마우스이벤트","p":["마우스 커서가 요소 바깥으로 나갈 때 발생합니다. (하위 요소에 대해서도 반응)","마우스 커서가 요소 바깥으로 나갈 때 발생합니다.(하위 요소에 대해서는 반응하지 않음)","마우스 커서가 요소 위로 이동하면 발생합니다. (하위 요소에 대해서는 반응하지 않음)","마우스 커서가 요소 위로 이동하면 발생합니다. (하위 요소에 대해서도 반응)","마우스 커서가 요소 위에서 움직일 때마다 발생합니다.","사용자가 마우스 버튼을 놓았을 때 발생합니다.","사용자가 마우스 버튼을 눌렀을 때 발생합니다.","사용자가 요소를 더블 클릭했을 때 발생합니다.","사용자가 요소를 클릭했을 때 발생합니다.","설명","이벤트 이름","click","dblclick","mousedown","mouseenter","mouseleave","mousemove","mouseout","mouseover","mouseup"]},{"i":"212-키보드이벤트","l":"2.1.2. 키보드이벤트","p":["이벤트 이름","설명","keydown","키보드의 키를 누르는 순간 발생합니다.","keyup","키보드의 키를 놓는 순간 발생합니다.","keypress","문자키가 눌렸을 때 발생합니다. 'keydown'과 'keyup' 사이에서 발생하며, 특수키에는 반응하지 않습니다."]},{"i":"213-문서로딩이벤트","l":"2.1.3. 문서로딩이벤트","p":["이벤트 이름","설명","DOMContentLoaded","HTML 문서의 파싱이 완료되었고, DOM 트리가 완성되었을 때 발생합니다. 외부 리소스(images, stylesheets 등)의 로딩 상태와는 무관합니다.","load","페이지와 모든 관련 리소스(images, stylesheets 등)가 완전히 로드되었을 때 window 객체에서 발생합니다.","beforeunload","사용자가 페이지를 벗어나려 할 때 window 객체에서 발생합니다. 이를 활용하여 사용자에게 페이지를 벗어나지 않도록 경고할 수 있습니다.","unload","사용자가 페이지를 벗어났을 때 window 객체에서 발생합니다.","resize","문서 화면 크기가 바뀌었을때 이벤트가 발생합니다.","scroll","문서 화면이 스크롤 되었을때 이벤트가 발생합니다."]},{"i":"214-폼이벤트","l":"2.1.4. 폼이벤트","p":["이벤트 이름","설명","submit","폼 데이터가 서버로 제출되기 전에 발생합니다. 이 이벤트의 기본 동작은 페이지를 새로고침하는 것이지만, preventDefault 메소드를 사용하여 중단할 수 있습니다.","reset","폼의 리셋 버튼이 클릭되었을 때 발생합니다.","focus","요소가 포커스를 받았을 때 발생합니다.","blur","요소가 포커스를 잃었을 때 발생합니다.","change","사용자가 입력 필드의 값을 변경하고 포커스를 잃었을 때 발생합니다.","input","사용자가 입력 필드에 값을 입력할 때마다 발생합니다."]},{"i":"22-이벤트처리기","l":"2.2. 이벤트처리기","p":["이벤트 처리기(event handler) 또는 이벤트 리스너(event listener)는 특정 이벤트가 발생했을 때 실행되는 함수 를 말합니다.","웹 페이지에서 사용자의 상호작용(마우스 클릭, 키보드 입력 등) 또는 브라우저의 특정 동작(페이지 로딩, 이미지 로딩 완료 등)과 같은 이벤트가 발생하면, 그에 따른 반응을 처리하기 위해 이벤트 처리기를 사용합니다.","이벤트 처리기의 3가지 기본문법","html 속성으로 설정","dom 프로퍼티로 설정","addEventListener 메서드로 설정","addEventListener 메서드 사용 [강추 \uD83D\uDC4D]","여러 개의 이벤트 리스너를 동일한 요소와 이벤트에 대해 추가할 수 있습니다."]},{"i":"221-html-속성을-이용한-방식-버튼-클릭시-알림창표시-예제14","l":"2.2.1. HTML 속성을 이용한 방식-버튼 클릭시 알림창표시-예제[14]"},{"i":"222-버튼-클릭시-배경변경-예제15","l":"2.2.2. 버튼 클릭시 배경변경-예제[15]"},{"i":"223-버튼-클릭시-상세설명-표시-예제16","l":"2.2.3. 버튼 클릭시 상세설명 표시-예제[16]","p":["아래의 코드를 복사하여 시작하겠습니다.","html속성을 사용하여 이벤트핸들러를 처리한 예시 였습니다."]},{"i":"224-dom을-이용한-방식-버튼클릭시-글자변경-예제17","l":"2.2.4. DOM을 이용한 방식-버튼클릭시 글자변경-예제[17]","p":["아래의 코드를 복사하여 시작합니다.","\uD83D\uDD1716 예제 를 응용하여 DOM 방식으로 상세설명열고 닫는 함수를 수정해 보세요","다음 조건을 참고하여 매개변수로 전달받은 두수의 값이 같으면 곱하고 다르면 더하는 함수 sumMulti() 를 작성하세요.","그후 인자로 5,10 을 전달할때와 10,10 을 전달할때의 실행결과를 콘솔창에 표시하세요.","함수의 선언은 function sumMulti(x,y) 로 합니다.","if~ else 문을 사용하여 두수의 값을 비교합니다.","값의 비교시 비교연산자는 === 를 사용합니다.","프롬프트 창에서 두수를 입력받아 크기를 서로 비교한 후 더 큰 숫자를 알림창으로 표시하는 함수를 작성하세요.","프롬프트 창에서 입력받은 두수를 각각 num1, num2 변수에 저장합니다.","함수 선언시 함수명은 자유롭게 지정하고 매개변수는 2개를 사용합니다.","if~ else 문을 사용하며 값의 비교시 비교연산자는 === 를 사용합니다.","두수가 같을경우 '같습니다' 를 출력합니다."]}],[{"l":"4. 객체"},{"l":"1. 객체의 이해"},{"l":"2. 내장객체"},{"i":"3-bom브라우저객체","l":"3. BOM(브라우저객체)"}],[{"i":"5-dom-문서객체모델","l":"5. DOM(문서객체모델)"},{"l":"1. 문서객체모델의 이해"},{"i":"2-dom에-접근하기속성취득하기","l":"2. DOM에 접근하기/속성취득하기"},{"l":"3. DOM에서 이벤트 처리하기"},{"l":"4. DOM에서 노드 조작하기"}],[{"l":"1. 자료형"},{"i":"11-참조형","l":"1.1. 참조형"},{"i":"111-배열","l":"1.1.1. 배열"},{"i":"1111-개요","l":"1.1.1.1. 개요","p":["반복문과 함께 쓰이는 배열자료형을 알아봅시다.","배열은 여러 값을 한공간에 저장할때 쓰입니다.","배열은 한 반에 속한 여러 학생을 생각하면 됩니다.","이때 우리는 학급을 배열, 학생을 요소 혹은 원소 라고 부릅니다.","학교에서는 한반에 속한 여러 학생들의 관리하기 위해 학생들에게 번호를 부여합니다.","이름으로 관리할 경우 동명이인이 있기도 하고 번호에 비해 효율성이 떨어지기 때문이지요.","이때 학생에게 부여되는 일련의 번호를 배열에서는 인덱스 번호 라고 합니다.","배열의 선언은 [ ] 값의 구분은 , 으로 합니다.","배열의 인덱스 번호는 0 부터 시작합니다.","배열의 값(요소)은 문자,숫자,객체,함수 모든 자료형이 들어갈수 있습니다.","배열은 값의 집합이다"]}],[{"l":"1. 스와이퍼"},{"i":"11-동영상슬라이더","l":"1.1. 동영상슬라이더"},{"i":"111-html","l":"1.1.1. html"},{"i":"112-js","l":"1.1.2. js"}],[{"l":"Retype 설치"},{"l":"공식사이트","p":["Retype을 전역으로 설치하기 위해서는 다음과 같은 명령어를 사용합니다:","npm install retypeapp -g","새로운 프로젝트를 시작하기 위해서는 다음과 같은 명령어를 사용합니다: retype new my-project 위의 명령어에서 'my-project' 부분은 여러분의 프로젝트 이름으로 변경해주세요.","생성된 프로젝트 폴더로 이동하여 Retype을 실행시킵니다: cd my-project"]},{"i":"retype-빌드","l":"Retype 빌드:","p":["먼저 Retype을 사용하여 프로젝트를 생성하고 실행시킨 후, 원하는 내용으로 웹사이트를 작성합니다. 모든 변경 사항을 저장한 후, 터미널에서 다음 명령어를 입력하여 프로젝트를 빌드합니다: retype build 이 명령어는 output 디렉터리에 정적 파일들을 생성합니다. 이 디렉터리에 있는 모든 파일들은 호스팅할 준비가 된 상태입니다."]},{"l":"배포","p":["GitHub Pages: output 디렉터리의 내용 전체를 GitHub 저장소의 gh-pages 브랜치에 푸시(push)합니다. GitHub 저장소 설정에서 GitHub Pages 섹션으로 이동한 후, Source 옵션을 gh-pages로 설정합니다. 그러면 웹사이트가 .github.io/ 주소에서 접근 가능해집니다."]},{"l":"CLI"},{"l":"테마변경하기","p":["~~ CSS Override: 보다 안전한 방법으로는, Retype 설정에서 제공하는 override.css 기능을 사용하는 것입니다. 이는 기본 스타일에 우선하여 적용되며, 원하는 스타일 변경사항을 반영할 수 있습니다. retype.yml 설정 파일에서 아래와 같이 override.css 경로를 지정합니다:","'/path/to/your/override.css' 그리고 해당 경로에 override.css 파일을 만들고 원하는 스타일링 코드를 작성합니다. 테마 커스터마이징: Retype은 테마 커스터마이징도 지원합니다. 테마 관련 설정은 retype.yml 설정 파일에서 조정할 수 있습니다.~~"]},{"l":"alert"}]]